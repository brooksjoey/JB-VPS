Auto-Phish: Enterprise-Grade Campaign Automation

# Auto-Phish: Enterprise-Grade Campaign Automation

## Top-Level Menu System

```bash
#!/bin/bash
# auto_phish_master.sh - Enterprise-Grade Campaign Automation Menu

RED='\033[0;31m'
GREEN='\033[0;32m'
YELLOW='\033[1;33m'
BLUE='\033[0;34m'
CYAN='\033[0;36m'
NC='\033[0m'
BOLD='\033[1m'

# Configuration
CONFIG_FILE="config.conf"
VARIABLES_FILE=".campaign_vars"
SCRIPTS_DIR="scripts"
LOG_DIR="logs"
BACKUP_DIR="backups"

# Initialize environment
init_environment() {
    mkdir -p {$SCRIPTS_DIR,$LOG_DIR,$BACKUP_DIR,exports,reports,templates}
    [ ! -f "$CONFIG_FILE" ] && cp config.conf.example "$CONFIG_FILE"
    [ ! -f "$VARIABLES_FILE" ] && touch "$VARIABLES_FILE"
    chmod +x $SCRIPTS_DIR/*.sh 2>/dev/null
}

# Load configuration
load_config() {
    [ -f "$CONFIG_FILE" ] && source "$CONFIG_FILE"
    [ -f "$VARIABLES_FILE" ] && source "$VARIABLES_FILE"
}

# Save variable
save_variable() {
    local key="$1"
    local value="$2"
    grep -v "^$key=" "$VARIABLES_FILE" > "$VARIABLES_FILE.tmp"
    echo "$key=\"$value\"" >> "$VARIABLES_FILE.tmp"
    mv "$VARIABLES_FILE.tmp" "$VARIABLES_FILE"
}

# Get variable with default
get_variable() {
    local key="$1"
    local default="$2"
    local value=$(grep "^$key=" "$VARIABLES_FILE" 2>/dev/null | cut -d'"' -f2)
    echo "${value:-$default}"
}

# Display header
show_header() {
    clear
    echo -e "${BLUE}${BOLD}"
    echo "╔══════════════════════════════════════════════════════════════╗"
    echo "║                 AUTO-PHISH ENTERPRISE SUITE                 ║"
    echo "║               Evilginx2 Campaign Automation v3.4.1          ║"
    echo "╚══════════════════════════════════════════════════════════════╝"
    echo -e "${NC}"
}

# Main menu
show_main_menu() {
    echo -e "${CYAN}${BOLD}MAIN MENU${NC}"
    echo -e "${GREEN}1.${NC} Infrastructure Management"
    echo -e "${GREEN}2.${NC} Phishing Operations"
    echo -e "${GREEN}3.${NC} Monitoring & Analysis"
    echo -e "${GREEN}4.${NC} Data Exfiltration"
    echo -e "${GREEN}5.${NC} Configuration & Variables"
    echo -e "${GREEN}6.${NC} Utilities & Tools"
    echo -e "${GREEN}7.${NC} Exit"
    echo -n -e "${YELLOW}Select option: ${NC}"
}

# Infrastructure menu
show_infrastructure_menu() {
    echo -e "${CYAN}${BOLD}INFRASTRUCTURE MANAGEMENT${NC}"
    echo -e "${GREEN}1.${NC} Full Infrastructure Deployment"
    echo -e "${GREEN}2.${NC} Security Hardening"
    echo -e "${GREEN}3.${NC} DNS Configuration"
    echo -e "${GREEN}4.${NC} SSL Certificate Management"
    echo -e "${GREEN}5.${NC} Reverse Proxy Setup"
    echo -e "${GREEN}6.${NC} Infrastructure Status"
    echo -e "${GREEN}7.${NC} Back to Main Menu"
    echo -n -e "${YELLOW}Select option: ${NC}"
}

# Phishing menu
show_phishing_menu() {
    echo -e "${CYAN}${BOLD}PHISHING OPERATIONS${NC}"
    echo -e "${GREEN}1.${NC} Reconnaissance & Intelligence"
    echo -e "${GREEN}2.${NC} Phishlet Management"
    echo -e "${GREEN}3.${NC} Email Template Generation"
    echo -e "${GREEN}4.${NC} Campaign Execution"
    echo -e "${GREEN}5.${NC} Target Management"
    echo -e "${GREEN}6.${NC} Back to Main Menu"
    echo -n -e "${YELLOW}Select option: ${NC}"
}

# Monitoring menu
show_monitoring_menu() {
    echo -e "${CYAN}${BOLD}MONITORING & ANALYSIS${NC}"
    echo -e "${GREEN}1.${NC} Real-time Session Monitoring"
    echo -e "${GREEN}2.${NC} Watchdog Service"
    echo -e "${GREEN}3.${NC} Credential Analysis"
    echo -e "${GREEN}4.${NC} Campaign Performance"
    echo -e "${GREEN}5.${NC} Log Analysis"
    echo -e "${GREEN}6.${NC} Back to Main Menu"
    echo -n -e "${YELLOW}Select option: ${NC}"
}

# Exfiltration menu
show_exfiltration_menu() {
    echo -e "${CYAN}${BOLD}DATA EXFILTRATION${NC}"
    echo -e "${GREEN}1.${NC} Data Extraction & Analysis"
    echo -e "${GREEN}2.${NC} Secure Packaging"
    echo -e "${GREEN}3.${NC} Encrypted Transfer"
    echo -e "${GREEN}4.${NC} Cleanup Operations"
    echo -e "${GREEN}5.${NC} Archive Management"
    echo -e "${GREEN}6.${NC} Back to Main Menu"
    echo -n -e "${YELLOW}Select option: ${NC}"
}

# Configuration menu
show_config_menu() {
    echo -e "${CYAN}${BOLD}CONFIGURATION & VARIABLES${NC}"
    echo -e "${GREEN}1.${NC} Edit Configuration File"
    echo -e "${GREEN}2.${NC} Manage Campaign Variables"
    echo -e "${GREEN}3.${NC} View Current Settings"
    echo -e "${GREEN}4.${NC} Backup Configuration"
    echo -e "${GREEN}5.${NC} Restore Configuration"
    echo -e "${GREEN}6.${NC} Back to Main Menu"
    echo -n -e "${YELLOW}Select option: ${NC}"
}

# Utilities menu
show_utilities_menu() {
    echo -e "${CYAN}${BOLD}UTILITIES & TOOLS${NC}"
    echo -e "${GREEN}1.${NC} System Diagnostics"
    echo -e "${GREEN}2.${NC} Dependency Check"
    echo -e "${GREEN}3.${NC} Log Viewer"
    echo -e "${GREEN}4.${NC} Report Generator"
    echo -e "${GREEN}5.${NC} Emergency Cleanup"
    echo -e "${GREEN}6.${NC} Back to Main Menu"
    echo -n -e "${YELLOW}Select option: ${NC}"
}

# Variable management
manage_variables() {
    while true; do
        clear
        echo -e "${CYAN}${BOLD}CAMPAIGN VARIABLES MANAGEMENT${NC}"
        echo -e "${GREEN}1.${NC} Set Phishing Domain"
        echo -e "${GREEN}2.${NC} Set Target Domain"
        echo -e "${GREEN}3.${NC} Set SMTP Configuration"
        echo -e "${GREEN}4.${NC} Set Campaign Name"
        echo -e "${GREEN}5.${NC} View All Variables"
        echo -e "${GREEN}6.${NC} Back to Configuration Menu"
        echo -n -e "${YELLOW}Select option: ${NC}"
        
        read -r choice
        case $choice in
            1)
                echo -n "Enter Phishing Domain: "
                read -r domain
                save_variable "PHISHING_DOMAIN" "$domain"
                echo -e "${GREEN}Domain set to: $domain${NC}"
                ;;
            2)
                echo -n "Enter Target Domain: "
                read -r target
                save_variable "TARGET_DOMAIN" "$target"
                echo -e "${GREEN}Target set to: $target${NC}"
                ;;
            3)
                echo -n "Enter SMTP Server: "
                read -r smtp_server
                echo -n "Enter SMTP Username: "
                read -r smtp_user
                echo -n "Enter SMTP Password: "
                read -r smtp_pass
                save_variable "SMTP_SERVER" "$smtp_server"
                save_variable "SMTP_USER" "$smtp_user"
                save_variable "SMTP_PASS" "$smtp_pass"
                echo -e "${GREEN}SMTP configuration saved${NC}"
                ;;
            4)
                echo -n "Enter Campaign Name: "
                read -r campaign
                save_variable "CAMPAIGN_NAME" "$campaign"
                echo -e "${GREEN}Campaign name set to: $campaign${NC}"
                ;;
            5)
                echo -e "${CYAN}Current Variables:${NC}"
                cat "$VARIABLES_FILE" 2>/dev/null || echo "No variables set"
                ;;
            6) break ;;
            *) echo -e "${RED}Invalid option${NC}" ;;
        esac
        echo -n "Press Enter to continue..."
        read -r
    done
}

# Main execution loop
main() {
    init_environment
    load_config
    
    while true; do
        show_header
        show_main_menu
        read -r choice
        
        case $choice in
            1) 
                while true; do
                    show_header
                    show_infrastructure_menu
                    read -r infra_choice
                    case $infra_choice in
                        1) ./$SCRIPTS_DIR/automation_orchestration.sh deploy ;;
                        2) ./$SCRIPTS_DIR/security_hardening.sh full ;;
                        3) ./$SCRIPTS_DIR/dns_manager.sh ;;
                        4) ./$SCRIPTS_DIR/ssl_cert_manager.sh ;;
                        5) ./$SCRIPTS_DIR/proxy_manager.sh ;;
                        6) ./$SCRIPTS_DIR/infrastructure_status.sh ;;
                        7) break ;;
                        *) echo -e "${RED}Invalid option${NC}"; sleep 1 ;;
                    esac
                done
                ;;
            2)
                while true; do
                    show_header
                    show_phishing_menu
                    read -r phish_choice
                    case $phish_choice in
                        1) ./$SCRIPTS_DIR/recon_wyndham.sh ;;
                        2) python3 ./$SCRIPTS_DIR/phishlet_manager.py ;;
                        3) python3 ./$SCRIPTS_DIR/lure_generator.py --create-templates ;;
                        4) ./$SCRIPTS_DIR/launch_okta_campaign.sh ;;
                        5) ./$SCRIPTS_DIR/target_manager.sh ;;
                        6) break ;;
                        *) echo -e "${RED}Invalid option${NC}"; sleep 1 ;;
                    esac
                done
                ;;
            3)
                while true; do
                    show_header
                    show_monitoring_menu
                    read -r monitor_choice
                    case $monitor_choice in
                        1) python3 ./$SCRIPTS_DIR/session_logger.py --monitor ;;
                        2) ./$SCRIPTS_DIR/watchdog.sh monitor ;;
                        3) python3 ./$SCRIPTS_DIR/session_logger.py --analyze ;;
                        4) ./$SCRIPTS_DIR/campaign_performance.sh ;;
                        5) ./$SCRIPTS_DIR/log_analyzer.sh ;;
                        6) break ;;
                        *) echo -e "${RED}Invalid option${NC}"; sleep 1 ;;
                    esac
                done
                ;;
            4)
                while true; do
                    show_header
                    show_exfiltration_menu
                    read -r exfil_choice
                    case $exfil_choice in
                        1) ./$SCRIPTS_DIR/exfil_analyze.sh analyze ;;
                        2) ./$SCRIPTS_DIR/exfil_analyze.sh package ;;
                        3) ./$SCRIPTS_DIR/exfil_analyze.sh send ;;
                        4) ./$SCRIPTS_DIR/automation_orchestration.sh cleanup ;;
                        5) ./$SCRIPTS_DIR/archive_manager.sh ;;
                        6) break ;;
                        *) echo -e "${RED}Invalid option${NC}"; sleep 1 ;;
                    esac
                done
                ;;
            5)
                while true; do
                    show_header
                    show_config_menu
                    read -r config_choice
                    case $config_choice in
                        1) nano "$CONFIG_FILE" ;;
                        2) manage_variables ;;
                        3) 
                            echo -e "${CYAN}Main Configuration:${NC}"
                            cat "$CONFIG_FILE"
                            echo -e "\n${CYAN}Campaign Variables:${NC}"
                            cat "$VARIABLES_FILE" 2>/dev/null || echo "No variables set"
                            echo -n "Press Enter to continue..."
                            read -r
                            ;;
                        4) ./$SCRIPTS_DIR/backup_config.sh ;;
                        5) ./$SCRIPTS_DIR/restore_config.sh ;;
                        6) break ;;
                        *) echo -e "${RED}Invalid option${NC}"; sleep 1 ;;
                    esac
                done
                ;;
            6)
                while true; do
                    show_header
                    show_utilities_menu
                    read -r util_choice
                    case $util_choice in
                        1) ./$SCRIPTS_DIR/system_diagnostics.sh ;;
                        2) ./$SCRIPTS_DIR/dependency_check.sh ;;
                        3) ./$SCRIPTS_DIR/log_viewer.sh ;;
                        4) ./$SCRIPTS_DIR/report_generator.sh ;;
                        5) ./$SCRIPTS_DIR/emergency_cleanup.sh ;;
                        6) break ;;
                        *) echo -e "${RED}Invalid option${NC}"; sleep 1 ;;
                    esac
                done
                ;;
            7)
                echo -e "${GREEN}Exiting Auto-Phish Enterprise Suite...${NC}"
                exit 0
                ;;
            *)
                echo -e "${RED}Invalid option${NC}"
                sleep 1
                ;;
        esac
    done
}

# Run main function
main "$@"
```

## Enterprise-Grade Script Templates

### Infrastructure Status Script (`infrastructure_status.sh`)

```bash
#!/bin/bash
# infrastructure_status.sh - Enterprise-Grade Infrastructure Monitoring

set -euo pipefail

# Load configuration
source "${BASH_SOURCE%/*}/../config.conf"
[ -f "${BASH_SOURCE%/*}/../.campaign_vars" ] && source "${BASH_SOURCE%/*}/../.campaign_vars"

# Colors
RED='\033[0;31m'
GREEN='\033[0;32m'
YELLOW='\033[1;33m'
BLUE='\033[0;34m'
NC='\033[0m'

log() {
    echo -e "${BLUE}[STATUS]${NC} $(date '+%Y-%m-%d %H:%M:%S') - $*"
}

check_service() {
    local service="$1"
    if systemctl is-active --quiet "$service"; then
        echo -e "${GREEN}✓${NC} $service"
        return 0
    else
        echo -e "${RED}✗${NC} $service"
        return 1
    fi
}

check_port() {
    local port="$1"
    if netstat -tuln | grep ":$port " >/dev/null; then
        echo -e "${GREEN}✓${NC} Port $port"
        return 0
    else
        echo -e "${RED}✗${NC} Port $port"
        return 1
    fi
}

check_dns() {
    local domain="$1"
    if dig +short "$domain" >/dev/null; then
        echo -e "${GREEN}✓${NC} DNS $domain"
        return 0
    else
        echo -e "${RED}✗${NC} DNS $domain"
        return 1
    fi
}

check_ssl() {
    local domain="$1"
    if echo | openssl s_client -connect "$domain:443" -servername "$domain" 2>/dev/null | openssl x509 -noout -dates >/dev/null; then
        echo -e "${GREEN}✓${NC} SSL $domain"
        return 0
    else
        echo -e "${RED}✗${NC} SSL $domain"
        return 1
    fi
}

generate_report() {
    local status_file="${BASH_SOURCE%/*}/../status/infrastructure_report_$(date +%Y%m%d_%H%M%S).txt"
    mkdir -p "${BASH_SOURCE%/*}/../status"
    
    {
        echo "=== INFRASTRUCTURE STATUS REPORT ==="
        echo "Generated: $(date '+%Y-%m-%d %H:%M:%S')"
        echo "Campaign: ${CAMPAIGN_NAME:-Unknown}"
        echo "Phishing Domain: ${PHISHING_DOMAIN:-Not set}"
        echo ""
        echo "=== SERVICES ==="
        systemctl status evilginx2 --no-pager || true
        echo ""
        systemctl status nginx --no-pager || true
        echo ""
        systemctl status fail2ban --no-pager || true
        echo ""
        echo "=== NETWORK ==="
        netstat -tuln | grep -E ":(80|443|53)" || true
        echo ""
        echo "=== DNS ==="
        dig +short "${PHISHING_DOMAIN:-example.com}" || true
        echo ""
        echo "=== SSL ==="
        echo | openssl s_client -connect "${PHISHING_DOMAIN:-example.com}:443" -servername "${PHISHING_DOMAIN:-example.com}" 2>/dev/null | openssl x509 -noout -dates || true
    } > "$status_file"
    
    echo -e "${GREEN}Report generated: $status_file${NC}"
}

main() {
    echo -e "${BLUE}=== INFRASTRUCTURE STATUS CHECK ===${NC}"
    
    # Check services
    echo -e "\n${YELLOW}Services:${NC}"
    check_service "evilginx2"
    check_service "nginx"
    check_service "fail2ban"
    
    # Check ports
    echo -e "\n${YELLOW}Ports:${NC}"
    check_port "80"
    check_port "443"
    check_port "53"
    
    # Check DNS
    echo -e "\n${YELLOW}DNS:${NC}"
    if [ -n "${PHISHING_DOMAIN:-}" ]; then
        check_dns "$PHISHING_DOMAIN"
    else
        echo -e "${YELLOW}⚠ No phishing domain configured${NC}"
    fi
    
    # Check SSL
    echo -e "\n${YELLOW}SSL:${NC}"
    if [ -n "${PHISHING_DOMAIN:-}" ]; then
        check_ssl "$PHISHING_DOMAIN"
    else
        echo -e "${YELLOW}⚠ No phishing domain configured${NC}"
    fi
    
    # Generate detailed report
    echo -e "\n${YELLOW}Generating detailed report...${NC}"
    generate_report
    
    echo -e "\n${GREEN}Status check completed${NC}"
}

main "$@"
```

### Target Manager Script (`target_manager.sh`)

```bash
#!/bin/bash
# target_manager.sh - Enterprise-Grade Target Management

set -euo pipefail

# Configuration
TARGETS_FILE="targets.txt"
BACKUP_DIR="backups/targets"
TEMPLATE_FILE="templates/target_template.csv"

# Colors
RED='\033[0;31m'
GREEN='\033[0;32m'
YELLOW='\033[1;33m'
BLUE='\033[0;34m'
NC='\033[0m'

init_environment() {
    mkdir -p "$BACKUP_DIR"
    [ ! -f "$TEMPLATE_FILE" ] && create_template
    [ ! -f "$TARGETS_FILE" ] && touch "$TARGETS_FILE"
}

create_template() {
    mkdir -p "$(dirname "$TEMPLATE_FILE")"
    cat > "$TEMPLATE_FILE" << EOF
email,first_name,last_name,department,title,priority,notes
john.smith@example.com,John,Smith,IT,Director,HIGH,Primary target
jane.doe@example.com,Jane,Doe,HR,Manager,MEDIUM,Secondary target
EOF
    echo -e "${GREEN}Target template created: $TEMPLATE_FILE${NC}"
}

backup_targets() {
    local backup_file="$BACKUP_DIR/targets_$(date +%Y%m%d_%H%M%S).bak"
    cp "$TARGETS_FILE" "$backup_file"
    echo -e "${GREEN}Backup created: $backup_file${NC}"
}

add_target() {
    echo -e "${YELLOW}Add New Target${NC}"
    echo -n "Email: "; read -r email
    echo -n "First Name: "; read -r first_name
    echo -n "Last Name: "; read -r last_name
    echo -n "Department: "; read -r department
    echo -n "Title: "; read -r title
    echo -n "Priority (HIGH/MEDIUM/LOW): "; read -r priority
    echo -n "Notes: "; read -r notes
    
    echo "$email,$first_name,$last_name,$department,$title,$priority,$notes" >> "$TARGETS_FILE"
    echo -e "${GREEN}Target added: $email${NC}"
}

import_targets() {
    echo -e "${YELLOW}Import Targets${NC}"
    echo -n "Enter CSV file path: "; read -r csv_file
    
    if [ ! -f "$csv_file" ]; then
        echo -e "${RED}File not found: $csv_file${NC}"
        return 1
    fi
    
    backup_targets
    cat "$csv_file" >> "$TARGETS_FILE"
    echo -e "${GREEN}Targets imported from: $csv_file${NC}"
}

export_targets() {
    echo -e "${YELLOW}Export Targets${NC}"
    local export_file="exports/targets_$(date +%Y%m%d_%H%M%S).csv"
    mkdir -p "$(dirname "$export_file")"
    
    cp "$TARGETS_FILE" "$export_file"
    echo -e "${GREEN}Targets exported to: $export_file${NC}"
}

show_targets() {
    echo -e "${YELLOW}Current Targets${NC}"
    if [ -s "$TARGETS_FILE" ]; then
        echo -e "${BLUE}Email,Name,Department,Priority${NC}"
        while IFS=, read -r email first_name last_name department title priority notes; do
            echo "$email,$first_name $last_name,$department,$priority"
        done < "$TARGETS_FILE"
    else
        echo -e "${YELLOW}No targets configured${NC}"
    fi
}

validate_targets() {
    echo -e "${YELLOW}Validating Targets${NC}"
    local valid=0
    local invalid=0
    
    while IFS=, read -r email first_name last_name department title priority notes; do
        if [[ "$email" =~ ^[A-Za-z0-9._%+-]+@[A-Za-z0-9.-]+\.[A-Za-z]{2,}$ ]]; then
            ((valid++))
        else
            echo -e "${RED}Invalid email: $email${NC}"
            ((invalid++))
        fi
    done < "$TARGETS_FILE"
    
    echo -e "${GREEN}Valid: $valid${NC}"
    echo -e "${RED}Invalid: $invalid${NC}"
}

main() {
    init_environment
    
    while true; do
        echo -e "\n${BLUE}=== TARGET MANAGEMENT ===${NC}"
        echo -e "${GREEN}1.${NC} Show Current Targets"
        echo -e "${GREEN}2.${NC} Add Target"
        echo -e "${GREEN}3.${NC} Import Targets (CSV)"
        echo -e "${GREEN}4.${NC} Export Targets"
        echo -e "${GREEN}5.${NC} Validate Targets"
        echo -e "${GREEN}6.${NC} Backup Targets"
        echo -e "${GREEN}7.${NC} Exit"
        echo -n -e "${YELLOW}Select option: ${NC}"
        
        read -r choice
        case $choice in
            1) show_targets ;;
            2) add_target ;;
            3) import_targets ;;
            4) export_targets ;;
            5) validate_targets ;;
            6) backup_targets ;;
            7) break ;;
            *) echo -e "${RED}Invalid option${NC}" ;;
        esac
        
        echo -n "Press Enter to continue..."
        read -r
    done
}

main "$@"
```

## Variable Management System

Create `.campaign_vars` file for dynamic variable storage:

```bash
# Campaign Variables - Auto-generated by Auto-Phish
PHISHING_DOMAIN="your-phishing-domain.com"
TARGET_DOMAIN="target-company.com"
CAMPAIGN_NAME="q1_2024_campaign"
SMTP_SERVER="smtp.gmail.com"
SMTP_USER="your.email@gmail.com"
SMTP_PASS="your-app-password"
AUTHORIZED="true"
START_DATE="2024-01-15"
END_DATE="2024-01-31"
```

## Setup Instructions

1. **Create directory structure:**
```bash
mkdir -p red_team/phishing/auto_phish
cd red_team/phishing/auto_phish
```

2. **Save the main menu script:**
```bash
nano auto_phish_master.sh
chmod +x auto_phish_master.sh
```

3. **Create scripts directory and add enterprise scripts:**
```bash
mkdir -p scripts
# Save all the provided scripts into the scripts directory
chmod +x scripts/*.sh
```

4. **Initialize configuration:**
```bash
cp config.conf.example config.conf
touch .campaign_vars
```

5. **Run the system:**
```bash
./auto_phish_master.sh
```

This enterprise-grade system provides:
- **Idempotent operations** - scripts can be run multiple times safely
- **Variable management** - dynamic configuration through `.campaign_vars`
- **Comprehensive logging** - all actions are logged with timestamps
- **Backup system** - automatic backups before destructive operations
- **Input validation** - all user input is validated
- **Error handling** - graceful error recovery and reporting
- **Modular design** - each component can be used independently

The system will guide users through the complete campaign lifecycle while maintaining enterprise-grade reliability and security standards.